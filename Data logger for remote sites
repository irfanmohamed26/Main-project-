main stm code

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#include <string.h>
#include <math.h>
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// BME280 Calibration Structure
typedef struct {
    uint16_t dig_T1;
    int16_t dig_T2, dig_T3;
    uint16_t dig_P1;
    int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
    uint8_t  dig_H1;
    int16_t  dig_H2;
    uint8_t  dig_H3;
    int16_t  dig_H4;
    int16_t  dig_H5;
    int8_t   dig_H6;
} BME280_CalibData;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BME280_ADDR          0x76
#define BME280_REG_CALIB     0x88
#define BME280_REG_HUM_CALIB 0xE1
#define BME280_REG_CTRL_HUM  0xF2
#define BME280_REG_CTRL_MEAS 0xF4
#define BME280_REG_DATA      0xF7

#define SEA_LEVEL_PRESSURE   1013.25f

#define TEMP_THRESHOLD       0.5f     // in °C
#define PRESSURE_THRESHOLD   0.5f     // in hPa
#define HUMIDITY_THRESHOLD   1.0f     // in %
#define ALTITUDE_THRESHOLD   1.0f     // in meters

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */


BME280_CalibData bme280_calib;
int32_t t_fine;

float prev_temp = 0.0f;
float prev_pressure = 0.0f;
float prev_humidity = 0.0f;
float prev_altitude = 0.0f;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void BME280_Init(void);
void BME280_ReadCalibration(void);
void BME280_ReadData(float *t, float *p, float *h);
int32_t BME280_CompensateTemperature(int32_t adc_T);
int32_t BME280_CompensatePressure(int32_t adc_P);
int32_t BME280_CompensateHumidity(int32_t adc_H);
float ComputeAltitude(float pressure, float seaLevelPressure);
void check_sensor_data(float temp, float pressure, float hum, float alt);

float ComputeAltitude(float pressure, float seaLevelPressure) {
    return 44330.0f * (1.0f - pow(pressure / seaLevelPressure, 0.1903f));
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void check_sensor_data(float temp, float pressure, float hum, float alt) {
    char alert_msg[256];
    uint8_t alert = 0;

    // Compare current sensor values with previous values
    if (fabsf(temp - prev_temp) > TEMP_THRESHOLD) {
        sprintf(alert_msg, "ALERT: Sudden Temperature Change (Δ %.2f°C)\r\n", temp - prev_temp);
        HAL_UART_Transmit(&huart1, (uint8_t*)alert_msg, strlen(alert_msg), 100);
        HAL_UART_Transmit(&huart2, (uint8_t*)alert_msg, strlen(alert_msg), 100);
        alert = 1;
    }
    if (fabsf(pressure - prev_pressure) > PRESSURE_THRESHOLD) {
        sprintf(alert_msg, "ALERT: Sudden Pressure Change (Δ %.2f hPa)\r\n", pressure - prev_pressure);
        HAL_UART_Transmit(&huart1, (uint8_t*)alert_msg, strlen(alert_msg), 100);
        HAL_UART_Transmit(&huart2, (uint8_t*)alert_msg, strlen(alert_msg), 100);
        alert = 1;
    }
    if (fabsf(hum - prev_humidity) > HUMIDITY_THRESHOLD) {
        sprintf(alert_msg, "ALERT: Sudden Humidity Change (Δ %.2f%%)\r\n", hum - prev_humidity);
        HAL_UART_Transmit(&huart1, (uint8_t*)alert_msg, strlen(alert_msg), 100);
        HAL_UART_Transmit(&huart2, (uint8_t*)alert_msg, strlen(alert_msg), 100);
        alert = 1;
    }
    if (fabsf(alt - prev_altitude) > ALTITUDE_THRESHOLD) {
        sprintf(alert_msg, "ALERT: Sudden Altitude Change (Δ %.2f m)\r\n", alt - prev_altitude);
        HAL_UART_Transmit(&huart1, (uint8_t*)alert_msg, strlen(alert_msg), 100);
        HAL_UART_Transmit(&huart2, (uint8_t*)alert_msg, strlen(alert_msg), 100);
        alert = 1;
    }

    if (!alert) {
    	HAL_UART_Transmit(&huart1, (uint8_t*)"Sensor readings stable.\r\n", 26, 100);
        HAL_UART_Transmit(&huart2, (uint8_t*)"Sensor readings stable.\r\n", 26, 100);
    }

    // Update previous values for next iteration
    prev_temp = temp;
    prev_pressure = pressure;
    prev_humidity = hum;
    prev_altitude = alt;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  I2C_Scanner();
  BME280_Init();
  BME280_ReadCalibration();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char msg[512];
	          float temperature, pressure, humidity, altitude;

	          BME280_ReadData(&temperature, &pressure, &humidity);

	          altitude = ComputeAltitude(pressure, SEA_LEVEL_PRESSURE);

	          check_sensor_data(temperature, pressure, humidity, altitude);

	          snprintf(msg, sizeof(msg),
	          "Temperature: %.2fC\r\nPressure: %.2fhPa\r\nHumidity: %.2f%%\r\n\r\nAltitude: %.2f m\r\n\r\n",
			  temperature, pressure, humidity,altitude);
	          HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);

	          HAL_Delay(5000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void I2C_Scanner(void) {
    uint8_t devices = 0;
    char msg[32];

    HAL_UART_Transmit(&huart2, (uint8_t*)"Scanning I2C bus...\r\n", 20, 100);

    for(uint8_t addr = 1; addr < 127; addr++) {
            if(HAL_I2C_IsDeviceReady(&hi2c1, addr<<1, 3, 100) == HAL_OK) {
                snprintf(msg, sizeof(msg), "Found device: 0x%02X\r\n", addr);
                HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
                devices++;
            }
        }

    if(!devices) {
            HAL_UART_Transmit(&huart2, (uint8_t*)"No devices found!\r\n", 18, 100);
        }
    }


void BME280_Init(void) {
    // Soft reset
    uint8_t reset_cmd = 0xB6;
    HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR<<1, 0xE0, 1, &reset_cmd, 1, 100);
    HAL_Delay(100);

    // Humidity control
        uint8_t ctrl_hum = 0x01;
        HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR<<1, BME280_REG_CTRL_HUM, 1, &ctrl_hum, 1, 100);

        // Measurement control
            uint8_t ctrl_meas = (0x01 << 5) | (0x05 << 2) | 0x03; // Temp x2, Press x16, Normal mode
            HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR<<1, BME280_REG_CTRL_MEAS, 1, &ctrl_meas, 1, 100);
            HAL_Delay(200);
        }



void BME280_ReadCalibration(void) {
    uint8_t calib[24];
    // Read temperature/pressure calibration
        HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR<<1, 0x88, 1, calib, 24, 100);

    // Parse calibration data
        bme280_calib.dig_T1 = (calib[1]<<8)|calib[0];
        bme280_calib.dig_T2 = (calib[3]<<8)|calib[2];
        bme280_calib.dig_T3 = (calib[5]<<8)|calib[4];

        bme280_calib.dig_P1 = (calib[7]<<8)|calib[6];
        bme280_calib.dig_P2 = (calib[9]<<8)|calib[8];
        bme280_calib.dig_P3 = (calib[11]<<8)|calib[10];
        bme280_calib.dig_P4 = (calib[13]<<8)|calib[12];
        bme280_calib.dig_P5 = (calib[15]<<8)|calib[14];
        bme280_calib.dig_P6 = (calib[17]<<8)|calib[16];
        bme280_calib.dig_P7 = (calib[19]<<8)|calib[18];
        bme280_calib.dig_P8 = (calib[21]<<8)|calib[20];
        bme280_calib.dig_P9 = (calib[23]<<8)|calib[22];


    HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR<<1, 0xA1, 1,
                    &bme280_calib.dig_H1, 1, 100);

    uint8_t h_calib[7];
        HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR<<1, 0xE1, 1, h_calib, 7, 100);

            bme280_calib.dig_H2 = (h_calib[1]<<8)|h_calib[0];
            bme280_calib.dig_H3 = h_calib[2];
            bme280_calib.dig_H4 = (h_calib[3]<<4)|(h_calib[4]&0x0F);
            bme280_calib.dig_H5 = (h_calib[5]<<4)|(h_calib[4]>>4);
            bme280_calib.dig_H6 = h_calib[6];
}

void BME280_ReadData(float *t, float *p, float *h) {
    uint8_t data[8];
    HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR<<1, BME280_REG_DATA,
                    1, data, 8, 100);

    int32_t adc_T = (data[3]<<12)|(data[4]<<4)|(data[5]>>4);
    int32_t adc_P = (data[0]<<12)|(data[1]<<4)|(data[2]>>4);
    int32_t adc_H = (data[6]<<8)|data[7];

    *t = (float)BME280_CompensateTemperature(adc_T)/100.0f;
    *p = (float)BME280_CompensatePressure(adc_P)/25600.0f;
    *h = (float)BME280_CompensateHumidity(adc_H)/1024.0f;
}

// Temperature compensation algorithm
int32_t BME280_CompensateTemperature(int32_t adc_T) {
    int32_t var1 = ((((adc_T>>3) - ((int32_t)bme280_calib.dig_T1<<1))) *
                 ((int32_t)bme280_calib.dig_T2) >> 11);

    int32_t var2 = (((((adc_T>>4) - (int32_t)bme280_calib.dig_T1) *
                  ((adc_T>>4) - (int32_t)bme280_calib.dig_T1)) >> 12) *
                  ((int32_t)bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
    return (t_fine * 5 + 128) >> 8;
}

// Pressure compensation algorithm
int32_t BME280_CompensatePressure(int32_t adc_P) {
    int64_t var1, var2, p;

    var1 = (int64_t)t_fine - 128000;
    var2 = var1 * var1 * (int64_t)bme280_calib.dig_P6;
    var2 = var2 + ((var1 * (int64_t)bme280_calib.dig_P5) << 17);
    var2 = var2 + (((int64_t)bme280_calib.dig_P4) << 35);
    var1 = ((var1 * var1 * (int64_t)bme280_calib.dig_P3) >> 8) + ((var1 * (int64_t)bme280_calib.dig_P2) << 12);
    var1 = ((((int64_t)1 << 47) + var1) * (int64_t)bme280_calib.dig_P1) >> 33;

    if (var1 == 0) return 0;

    p = 1048576 - adc_P;
    p = (((p << 31) - var2) * 3125) / var1;
    var1 = ((int64_t)bme280_calib.dig_P9 * (p >> 13) * (p >> 13)) >> 25;
    var2 = ((int64_t)bme280_calib.dig_P8 * p) >> 19;
    p = ((p + var1 + var2) >> 8) + ((int64_t)bme280_calib.dig_P7 << 4);

    return (int32_t)p;
}

// Humidity compensation algorithm
int32_t BME280_CompensateHumidity(int32_t adc_H) {
    int32_t var1 = t_fine - 76800;
    int32_t var2 = (adc_H<<14) - (bme280_calib.dig_H4<<20) - (bme280_calib.dig_H5*var1);
    var2 = (var2 + 16384) >> 15;
    int32_t var3 = var1 * bme280_calib.dig_H6;
    var3 = ((var3 >> 10) * ((var1 * bme280_calib.dig_H3 >> 11) + 32768)) >> 10;
    int32_t var4 = (var3 * bme280_calib.dig_H2 + 8192) >> 14;
    int32_t var5 = var2 * var4;
    var5 -= (var1 * bme280_calib.dig_H1 >> 7) * (var5 >> 15) * (var5 >> 15) >> 4;
    var5 = var5 < 0 ? 0 : (var5 > 419430400 ? 419430400 : var5);
    return var5 >> 12;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	          HAL_Delay(500);
  }
  }
  /* USER CODE END Error_Handler_Debug */

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
